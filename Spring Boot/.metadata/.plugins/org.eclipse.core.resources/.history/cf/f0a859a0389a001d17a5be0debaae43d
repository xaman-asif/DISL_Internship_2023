package io.javabrains.springbootquickstart.lesson;

import io.javabrains.payload.ResponsePayload;
import io.javabrains.springbootquickstart.course.Course;
import io.javabrains.springbootquickstart.course.requests.CourseUpdateRequest;
import io.javabrains.springbootquickstart.topic.Topic;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.List;

import javax.management.RuntimeErrorException;

@RestController
public class LessonController {
	
	@Autowired
	private LessonService lessonService;
	
	//get all lessons corresponding to course
	@RequestMapping("/topics/{topicId}/courses/{courseId}/lesson")
	public List<Course> getAllLessons(@PathVariable String courseId) {
		return lessonService.getAllLessons(courseId);
	}
		
	//get lesson corresponding to course lessonId
	@RequestMapping("/topics/{topicId}/courses/{courseId}/lesson/{lessonId}")
	public Course getLesson(@PathVariable String lessonId) {
		return lessonService.getLesson(lessonId);
	}
	
	//add course & topic to lesson class & save to database
	@RequestMapping(method=RequestMethod.POST, value="/topics/{topicId}/courses/{courseId}/lesson/")
	public Lesson addLesson(@RequestBody Lesson course, @PathVariable String topicId) {
		course.setTopic(new Topic(topicId, "", ""));
		return courseService.addCourse(course);
	}
	
//	@PutMapping("/update-topic")
//	public ResponsePayload updateCourse(@RequestBody CourseUpdateRequest request) {
//		// topicId -> find topic
//		// if not exists return error
//		//
//		
//		Course course = courseService.findTopById(request.getId());
//		if(course == null) {
//			return new ResponsePayload(false, "Course not found");
//		}
//		
//		course.setName(request.getName());
//		course.setDescription(request.getDescription());
//		return new ResponsePayload(true, "Course found", courseService.updateCourse(course));
//	}
	
	@RequestMapping(method=RequestMethod.PUT, value="/topics/{topicId}/courses/{id}")
	public Lesson updateCourse(@RequestBody Lesson course, @PathVariable String topicId, @PathVariable String id) {		
		course.setTopic(new Topic(topicId, "", ""));
//		System.out.println(course.getName() + " name");
		return courseService.updateCourse(course);
	}
	
	@RequestMapping(method=RequestMethod.DELETE, value="/topics/{topicId}/courses/{id}")
	public void deleteCourse(@PathVariable String id) {
		courseService.deleteCourse(id);
	}
	
	@RequestMapping("/courses")
	public List<Lesson> getCourse() {
		return courseService.getAllCourses();
	}
}
